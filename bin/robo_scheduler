#!/usr/local/share/anaconda/base/envs/python3_generic/bin/python3
# #######################################################################################################################
# ROBO SCHEDULER
# Submit, remove, and inspect scheduler requests UH88 Robotic Operations
#
# Author: Kyle Hart
# Date 30 Nov 2024
#######################################################################################################################
from robo88.scheduler import SchedulerRequests
import pandas as pd
import argparse


# Parse arguments
main_parser = argparse.ArgumentParser("robo_scheduler", description="UH88 Robotic Schedule Interface.")
main_parser.add_argument('--debug', action='store_true', default=False,
                         help='set to enable printing/logging in debug mode')
command_subparsers = main_parser.add_subparsers(title="command", dest="command")

# add_req subparser
add_req = command_subparsers.add_parser("add_req", help="submit single observation request",
                                        description="Submit single observation request to robotic observer.")
add_req.add_argument("obj_name", type=str, help="standard object name")
add_req.add_argument("instrument", type=str, help="instrument to observe on")
add_req.add_argument("ra_hms", type=str, help="right ascension (must start with ra=; \"ra=HH:MM:SS.S\"")
add_req.add_argument("dec_dms", type=str, help="declination (must start with dec=); dec=\"DD:MM:SS.S\"")
add_req.add_argument("username", type=str, help="name of requesting user (no spaces)")
add_req.add_argument("priority", type=int,
                     help="ranked priority of observation 1-5 for survey priorities; 9 for immediate ToO")
add_req.add_argument("window_start", type=str, help="beginning of observation window; UTC ISO format")
add_req.add_argument("window_finish", type=str, help="end of observation window; UTC ISO format")
add_req.add_argument("binning_mode", type=str,
                     help="STACam binning mode for readout, i.e., 1x1, 2x2, 5x5 |||| OPTIONS ['BIN2' 'BIN5']")
add_req.add_argument("filters", type=str,
                     help="STACam bandpass filters, comma separated list of available filters " \
                          "|||| OPTIONS ['Open', 'g', 'r', 'i' 'z', 'y']")
add_req.add_argument("exp_times", type=str,
                     help="exposure time in seconds per filter requested (e.g. r:90,z:120,y:150)")
add_req.add_argument("exp_num", type=int, help="number of exposures per filter")
add_req.add_argument("dither", type=str,
                     help="dither pattern for the exposure |||| OPTIONS ['none', 'line', 'circle', 'square']")
add_req.add_argument("stack", type=str,
                     help="whether or not to automatically generate stack for each set of exposures per filter " \
                          "|||| OPTIONS ['yes', 'no']")
add_req.add_argument("cadence", type=str, default='single',
                     help="single observation or nightly observations |||| OPTIONS ['single', 'nightly']")
add_req.add_argument("--ns_ref_time", type=str,
                     help="coordinate reference time for moving targets; UTC ISO format")
add_req.add_argument("--ns_rate_ra", type=float, help="motion of target in ra (mas/sec)")
add_req.add_argument("--ns_rate_dec", type=float, help="motion of target in dec (mas/sec)")
add_req.add_argument("--max_airmass", type=float, schedulep="maximum airmass allowed for observation")
add_req.add_argument("--min_moon_sep", type=float, help="minimum moon separation for observation (degrees)")
add_req.add_argument("--n_follow_on", type=int, help="number of lagged follow-on observations needed")
add_req.add_argument("--follow_on_lag_min", type=int,
                     help="minimum lag between first observation and follow-on; seconds")
add_req.add_argument("--follow_on_lag_max", type=int,
                     help="maximum lag between first observation and follow-on; seconds")
add_req.add_argument("--too", type=str,
                     help="if set, ToO observation will interrupt current observation, or run immediately after" \
                          "|||| OPTIONS ['interrupt', 'next']")
add_req.add_argument("--comments", type=str, help="general comments")

# load_reqs subparser
load_reqs = command_subparsers.add_parser("load_reqs", help="load observation requests from file",
                                          description="Load multiple observation requests from CSV file. "
                                                      "Display returned request indexes.")
load_reqs.add_argument("request_file", type=str,
                       help="CSV file where each line details a request, column names must match params from add_req.")
# get_reqs subparser
get_reqs = command_subparsers.add_parser("get_reqs", help="show all observation requests for a given user",
                                         description="Retrieve a dataframe of all observation "
                                                     "requests for a given user.")
get_reqs.add_argument("username", type=str, help="name of user associated with requests")
get_reqs.add_argument("--format", type=str, default="summary", help="output format, choices 'summary' 'csv'")


# del_req subparser
del_req = command_subparsers.add_parser("del_req", help="delete one or more observation requests from queue",
                                        description="Remove one or more observation requests from robotic queue.")
del_req.add_argument("username", type=str, help="name of the user who submitted obs requests")
del_req.add_argument("--obj_name", type=str, help="name of object to remove requests for")
del_req.add_argument("--req_idx", "--request_idx", type=int, help="index of individual obs request to remove")

# get_obs subparser
get_obs = command_subparsers.add_parser("get_obs", help="get directory information for recent observations",
                                        description="Retrieve directory names for user's recent observations.")
get_obs.add_argument("username", type=str, help="name of the user who submitted obs requests")
get_obs.add_argument("--n_nights", type=int, help="how many nights back to search")
get_obs.add_argument("--obj_name", type=str, help="name of object to search")

request_args = vars(main_parser.parse_args())


################################################################################################################
# Main process
################################################################################################################
# Read in observer config file
config = "/data/projects/UH88/robo88-manoa/aux/scheduler_requests.conf"
schedule = SchedulerRequests(config_file=config,
                             debug=request_args['debug'])

# Run command logic and submit commands
command = request_args['command']
del request_args['command']
del request_args['debug']

if command == "get_obs":
    filenames = schedule.get_recent_observation(request_args["username"], request_args["n_nights"], request_args["obj_name"])
    print("OBSERVATION FITS FILE PATHS:")
    for file in filenames:
        print(file)
    print(f"TOTAL OBSERVATIONS: {len(filenames)}")
elif command == "add_req":
    request_args['ra_hms'] = request_args['ra_hms'].replace("ra=", "")
    request_args['dec_dms'] = request_args['dec_dms'].replace("dec=", "")
    req_idx = schedule.add_request(request_args)
    print(f"SUBMITTED, REQUEST INDEX: {req_idx}")
elif command == "load_reqs":
    # Read in file
    df = pd.read_csv(request_args["request_file"])
    req_idxs = []
    print(f"SUBMITTING FILE: {request_args['request_file']}")
    for _, row in df.iterrows():
        row_dict = row.to_dict()
        # Submit rows
        req_idx = schedule.add_request(row_dict)
        print(req_idx)
elif command == "del_req":
    n_rows_del = schedule.remove_request(request_args["username"], request_args["obj_name"], request_args["req_idx"])
    print(f"SUCCESSFULLY DELETED {n_rows_del} REQUESTS")
elif command == "get_reqs":
    req_df = schedule.get_requests(request_args["username"])
    if len(req_df) == 0:
        print(f"NO OBSERVATION REQUESTS FOR {request_args['username']}")
    elif request_args['format'] == 'summary':
        print(req_df)
    elif request_args['format'] == 'csv':
        print(req_df.to_csv(index=False))
else:
    raise ValueError("Invalid Command")

schedule.close()
